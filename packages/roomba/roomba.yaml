# Roomba

vacuum:
  - platform: template
    vacuums:
      roomba:
        value_template: "{{ states('sensor.roomba_state') }}"
        battery_level_template: "{{ states('sensor.roomba_battery_level') | int }}"
        start:
          service: mqtt.publish
          data:
            topic: roomba/command/set
            payload: start
        pause:
          service: mqtt.publish
          data:
            topic: roomba/command/set
            payload: pause
        stop:
          service: mqtt.publish
          data:
            topic: roomba/command/set
            payload: stop
        return_to_base:
          service: script.turn_on
          data:
            entity_id: script.roomba_dock   

# Roomba Sensors

sensor:

  - platform: "mqtt"
    name: "Roomba Battery Level"
    state_topic: "roomba/tele/battery"
    unit_of_measurement: "%"
    device_class: "battery"

  - platform: "mqtt"
    name: "Roomba State"
    state_topic: "roomba/tele/status"

  - platform: "mqtt"
    name: "Roomba Scheduler Command"
    state_topic: "hass/roomba/command"

  - platform: template
    sensors:

      roomba_status:
        friendly_name: 'Roomba Status'
        value_template: >-
          {% if is_state('vacuum.roomba', 'docked') and states('counter.roomba_cycles') | int >= 5 -%}
            full
          {% else -%}
            {{ states('vacuum.roomba') }}
          {% endif -%}
        
# Roomba Switches

switch:
  - platform: template
    switches:
      roomba:
        friendly_name: "Roomba Power"
        value_template: "{{ is_state('vacuum.roomba', 'cleaning') or is_state('vacuum.roomba', 'returning') }}"
        turn_on:
          service: vacuum.start
          data:
            entity_id: vacuum.roomba
        turn_off:
          service: script.turn_on
          data:
            entity_id: script.roomba_dock   

input_boolean:

  roomba_auto:
    name: Schedule Enabled
    icon: mdi:timer      

counter:
  roomba_cycles:
    step: 1

# Roomba Scripts

script:

  roomba_dock:
    sequence:
      - service: mqtt.publish
        data:
          topic: roomba/command/set
          payload: stop
      - delay: 
          milliseconds: 500
      - service: mqtt.publish
        data:
          topic: roomba/command/set
          payload: dock            

  reset_roomba_counter:
    sequence:
      - service: counter.reset
        entity_id: counter.roomba_cycles   